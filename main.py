import os
import asyncio
from dotenv import load_dotenv
from telethon import TelegramClient, events
from telethon.sessions import StringSession

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env
load_dotenv()

api_id = int(os.getenv("API_ID"))
api_hash = os.getenv("API_HASH")
session_string = os.getenv("SESSION_STRING")

source_channel_id = int(os.getenv("SOURCE_CHANNEL_ID"))
target_group_id = int(os.getenv("TARGET_GROUP_ID"))

# –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞
client = TelegramClient(StringSession(session_string), api_id, api_hash)

@client.on(events.NewMessage(chats=source_channel_id))
async def handler(event):
    try:
        await event.forward_to(target_group_id)
        print(f'‚úÖ –ü–µ—Ä–µ—Å–ª–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {event.id}')
    except Exception as e:
        print(f'‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–µ: {e}')

async def main():
    await client.connect()
    if not await client.is_user_authorized():
        print("‚ùå –°–µ—Å—Å–∏—è –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞. –ü–æ–ª—É—á–∏ –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É SESSION_STRING.")
        return

    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Å–ª—É—à–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è...")
    await client.run_until_disconnected()

asyncio.run(main())